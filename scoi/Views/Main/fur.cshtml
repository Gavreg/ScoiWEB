
@{ ViewData["Title"] = "fur"; }

<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async
        src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<style>
    h3 {
        margin-top: 5px;
        margin-bottom: 5px;
    }
</style>

<h1>Частотная фильтрация</h1>

Изображение:
<input id="file" type="file" onchange="showpreview(this);" />
<div class="container">
    <img id="imgpreview" src="">
</div>
<div>
    <i>
        Увеличение размеров изображения для БФП<br />
        до числел, кратных степени двойки (без перемасштабирования) <br />
    </i>
    <label id="img_w">ширина > новая ширина</label> <br />
    <label id="img_h">высота > новая высота</label> <br /><br />
</div>
<div style="display: inline-block;">
    <select id="filter_type">
        <option>Идеальный фильтр</option>
        <option>Фильтр Баттерворта (ФНЧ)</option>
        <option>Фильтр Баттерворта (ФВЧ)</option>
        <option>Фильтр Гаусса (ФНЧ)</option>
        <option>Фильтр Гаусса (ФВЧ)</option>
    </select>
    <br />
    <br />

    <div id="ideal_params">
        <b><label>Области фильтра</label> </b><br />
        <textarea id="filter_ideal" class="filterprops" cols="40" rows="5">0;0;0;10</textarea><br />
        Формат строки: \( x; y; r_1; r_2; \) <br />
        \(x,y\) - координаты окружностей в Фурье-образе относительно центра, (\(y\) идет сверху вниз)<br />
        \(r_1\) - радиус внутренней окружности<br />
        \(r_2\) - радиус внешней окружности<br /><br />
        <b>Множетели</b><br />
        <label>Множитель Фурье-образа</label><input id="fur_mult_ideal" type="text" size="10" value="1">(не влияет на результат фильтрации)</input><br />
        <label>Удв. условие фильтра</label><input id="onCodition_ideal" type="text" size="10" value="1"> (для области образа между окружностями \(r_1 < x < r_2\))</input><br />
        <label>Не удв. условие фильтра</label><input id="noCodition_ideal" type="text" size="10" value="0">(для остальной части образа)<br />
    </div>

    <div id="bat_params" hidden>
        <b><label>Области фильтра</label> </b><br />
        <textarea id="filter_bat" class="filterprops" cols="50" rows="5">0;0;-10;10</textarea><br />
        Формат строки: \( x; y; r_1; r_2; \) <br />
        \(x,y\)  - координаты окружностей в Фурье-образе относительно центра (\(y\) идет сверху вниз), по которым берется частота среза<br />
        \(r_1\) - радиус внутренней окружности<br />
        \(r_2\) - радиус внешней окружности (для фильров нижних и высоких частот брать \(r_1 = -r_2\))<br /><br />
        <b>Множетели</b><br />
        <label>Множитель Фурье-образа</label><input id="fur_mult_bat" type="text" size="10" value="1">(не влияет на результат фильтрации)</input><br />
        <label>Коэф. усиления \(G\)</label><input id="gain_bat" type="text" size="10" value="1"> </input><br />
        <label>Порядок фильтра \(n\)</label><input id="order_bat" type="text" size="10" value="2"> </input><br />
    </div>

    <div id="gau_params" hidden>
        <b><label>Области фильтра</label> </b><br />
        <textarea id="filter_gau" class="filterprops" cols="50" rows="5">0;0;0-10;10</textarea><br />
        Формат строки: \( x; y; r_1; r_2; \) <br />
        \(x,y\) - координаты окружностей в Фурье-образе относительно центра(\(y\) идет сверху вниз), по которым берется частота среза<br />
        \(r_1\) - радиус внутренней окружности<br />
        \(r_2\) - радиус внешней окружности (для фильров нижних и высоких частот брать \(r_1 = -r_2\))<br /><br />
        <b>Множетели</b><br />
        <label>Множитель Фурье-образа</label><input id="fur_mult_gau" type="text" size="10" value="1">(не влияет на результат фильтрации)</input><br />
        <label>Коэф. усиления </label><input id="gain_gau" type="text" size="10" value="1"> </input><br />
    </div>

    <br />
    <input id="btn_send" type="button" value="Загрузить" /><br />

</div>

<div class="result">
    <h3 id="progress"></h3> <br />
    <h3 id="opTime"></h3><br />
    <div class="result_img">
        <div class="result_element">
            <h3>Восстановленное изображение</h3>
            <br />
            <img id="resultimg1" src="" />
        </div>
        <div class="result_element">
            <h3>Фурье-образ</h3>
            <input id="cbEditor" type="checkbox" checked />Редактор фильтра <br/>
            <input id="cbInnerRadius" type="checkbox" oninput="cbInnerRadius_change"/>Внутренний радиус <br/>
            <p id="mouse_coords">Коорд. курсора (x,y,R) = </p>
            <!-- img id="resultimg2" src="" / -->
            <canvas id="fur_editor" />
        </div>
        <div class="result_element">
            <h3>Фильтр (передаточная функция)</h3>
            <br />
            <img id="resultimg3" src="" />
        </div>

    </div>

</div>


@section scripts
{


    <script type="text/javascript" src="/Files/js/comon.js?v=@ViewBag.jsversion"></script>

    <script type="text/javascript">

        class Circle {
            constructor(x = 0, y = 0, r = 0) {
                this.x = x;
                this.y = y;
                this.r = r;
            }
            draw(context) {
                context.beginPath();
                context.arc(this.x, this.y, this.r, 0, 2 * Math.PI);
                context.stroke();
            }

        }

        class DoubleCircle extends Circle {
            constructor(x = 0, y = 0, r1 = 0, r2 = 0) {
                super(x, y, r1);
                this.r2 = r2;
                this.r1 = r1;
                this.style = "";
            }
            draw(context) {
                context.strokeStyle = this.style;
                context.beginPath();
                context.arc(this.x, this.y, this.r, 0, 2 * Math.PI);
                context.stroke();
                context.beginPath();
                context.arc(this.x, this.y, this.r2, 0, 2 * Math.PI);
                context.stroke();
            }
        }

        let imagename1 = "";
        let imagename2 = "";
        let imagename3 = "";

        let fur_img;
        let textlabel;
        let fur_edtr;

        let fur_editor;
        let ctx;

        let gizmo = new DoubleCircle(0, 0, 10, 0);
        let gizmo2 = new DoubleCircle(0, 0, 10,0);
        let circles = new Array();


        let new_width = 0;
        let new_height = 0;

        let cb;
        let back_image = new Image();

        let render = true;

        let isMousePressed = false;
        let mouseMode = 0;

        let textarea;
        let clickX = 0;
        let clickY = 0;
        let mY = 0;
        let mX = 0;
        let oldR = 0;

        $( document ).ready(function() {

            fur_img = $('#resultimg2');
            textlabel = document.getElementById("mouse_coords");
            fur_edtr = $('#fur_editor');

            fur_editor = document.getElementById("fur_editor");
            ctx = fur_editor.getContext("2d");
            cb = document.getElementById("filter_type");
            textarea = document.getElementById("filter_ideal");

            parse_params(textarea);

            let interval = setTimeout(function timerFunc() {
                if (render) {
                    render_canvas();
                }
                interval = setTimeout(timerFunc, 20);
            }, 20);

            cb.onchange = () => {
                $('#bat_params').hide();
                $('#gau_params').hide();
                $('#ideal_params').hide();

                if (cb.selectedIndex === 0) {
                    $('#ideal_params').show();
                    textarea = document.getElementById("filter_ideal");
                }
                else if (cb.selectedIndex === 1 || cb.selectedIndex === 2) {
                    $('#bat_params').show();
                    textarea = document.getElementById("filter_bat");
                }
                else if (cb.selectedIndex === 3 || cb.selectedIndex === 4) {
                    $('#gau_params').show();
                    textarea = document.getElementById("filter_gau");
                }
                parse_params();
            };
            $(".filterprops").change((e) => {
                parse_params(e.target);
                
            });

            fur_edtr.mousedown((e) => {
                isMousePressed = true;
            });
            fur_edtr.mouseup((e) => {
                isMousePressed = false;
            });
            fur_edtr.mousemove((e) => {
                mX = e.offsetX;
                mY = e.offsetY;

                switch (mouseMode) {
                    case 3:
                    case 4:
                    case 0:
                        {
                            gizmo.x = Number(e.offsetX);
                            gizmo.y = Number(e.offsetY);
                            gizmo2.x = -gizmo.x + fur_editor.width;
                            gizmo2.y = -gizmo.y + fur_editor.height;
                            break;
                        }
                    case 1:
                        {
                            let x1 = e.offsetX;
                            let y1 = e.offsetY;
                            let x2 = gizmo.x;
                            let y2 = gizmo.y;
                            
                            gizmo.r = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
                            gizmo2.r = gizmo.r;

                            gizmo.r2 = gizmo.r;
                            gizmo2.r2 = gizmo.r;
                            break;

                        }
                    case 2:
                        {
                            let x1 = e.offsetX;
                            let y1 = e.offsetY;
                            let x2 = gizmo.x;
                            let y2 = gizmo.y;
                            let r2 = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
                            if (r2 > gizmo.r) r2 = gizmo.r;
                            gizmo.r2 = r2;
                            gizmo2.r2 = r2;
                            break;
                        }
                }

                let x = Math.round(e.clientX - fur_edtr.offset().left + $(window).scrollLeft()) - new_width / 2;
                let y = Math.round(e.clientY - fur_edtr.offset().top + $(window).scrollTop()) - new_height / 2;
                let R = Math.round(Math.sqrt(x * x + y * y));
                textlabel.innerHTML = "Коорд. курсора (x,y,R) = " + x + " " + y + " " + R;

            });
            fur_edtr.mouseleave((e) => {
                render = false;
                if (mouseMode == 3) {
                    mouseMode = 0;
                    gizmo.r = 10;
                    gizmo2.r = 10;
                    gizmo.r2 = 0;
                    gizmo2.r2 = 0;
                }

            });

            fur_edtr.mouseenter((e) => {
                render = true;
            });

            fur_edtr.mouseleave((e) => {
                if (mouseMode==3)
                    mouseMode = 0;
            });

            fur_edtr.click((e) => {
                clickX = e.offsetX;
                clickY = e.offsetY;

                switch (mouseMode) {
                    case 0:
                        {
                            mouseMode=1;
                            oldR = gizmo.r;
                            break;
                        }
                    case 1:
                    {
                            if (document.getElementById("cbInnerRadius").checked) {
                                mouseMode = 2;

                            }
                            else {
                                mouseMode = 3;
                                gizmo.r2 = 0;
                                gizmo2.r2 = 0;
                                let s = "" + Math.round(gizmo.x - 0.5 * fur_editor.width) + ";" + Math.round(gizmo.y - 0.5 * fur_editor.height) + ";" + Math.round(gizmo.r2) + ";" + Math.round(gizmo.r);
                                textarea.value += "\n" + s;
                                s = "" + Math.round(gizmo2.x - 0.5 * fur_editor.width) + ";" + Math.round(gizmo2.y - 0.5 * fur_editor.height) + ";" + Math.round(gizmo2.r2) + ";" + Math.round(gizmo2.r);
                                textarea.value += "\n" + s;
                                parse_params(textarea);
                                }
                            break;
                        }
                    case 2:
                        {
                            
                            let s = "" + Math.round(gizmo.x - 0.5 * fur_editor.width) + ";" + Math.round(gizmo.y - 0.5 * fur_editor.height) + ";" + Math.round(gizmo.r2) + ";" + Math.round(gizmo.r);
                            textarea.value += "\n" + s;
                            s = "" + Math.round(gizmo2.x - 0.5 * fur_editor.width) + ";" + Math.round(gizmo2.y - 0.5 * fur_editor.height) + ";" + Math.round(gizmo2.r2) + ";" + Math.round(gizmo2.r);
                            textarea.value += "\n" + s;
                            parse_params(textarea);
                            break;
                        }
                    case 3:
                    {
                            mouseMode = 3;
                            let s = "" + Math.round(gizmo.x - 0.5 * fur_editor.width) + ";" + Math.round(gizmo.y - 0.5 * fur_editor.height) + ";" + Math.round(gizmo.r2) + ";" + Math.round(gizmo.r);
                            textarea.value += "\n" + s;
                            s = "" + Math.round(gizmo2.x - 0.5 * fur_editor.width) + ";" + Math.round(gizmo2.y - 0.5 * fur_editor.height) + ";" + Math.round(gizmo2.r2) + ";" + Math.round(gizmo2.r);
                            textarea.value += "\n" + s;
                            parse_params(textarea);
                            break;
                    }

                    default:
                        {
                            mouseMode = 0;
                        }
                }

            });

        });

        document.getElementById("cbInnerRadius").onclick = cbInnerRadius_change;

        function cbInnerRadius_change(e) {
            mouseMode = 0;
            gizmo.r = 10;
            gizmo2.r = 10;
            gizmo.r2 = 0;
            gizmo2.r2 = 0;
            
        }
        function parse_params(textarea) {
            let arr = textarea.value.split("\n");
            circles = new Array();
            arr.forEach((e, i) => {
                let p = e.split(";");
                let c = new DoubleCircle(Number(p[0]) + Number(fur_editor.width) / 2,
                    Number(p[1]) + Number(fur_editor.height) / 2,
                    p[3],
                    p[2]);
                circles.push(c);
            });
            render_canvas();
        }

        function render_canvas() {
            ctx.clearRect(0, 0, fur_editor.width, fur_editor.height);
            ctx.strokeStyle = "green";
            ctx.drawImage(back_image, 0, 0);

            if (mouseMode == 3)
                ctx.setLineDash([5, 5]);
            

            gizmo.draw(ctx);
            gizmo2.draw(ctx);

            ctx.setLineDash([]);

            circles.forEach((e, i) => {
                ctx.strokeStyle = "red";
                e.draw(ctx);
            });

           
           

            if (mouseMode === 1 || mouseMode === 2) {
                ctx.font = "18px serif";
                ctx.fillStyle = "red"
                ctx.fillText("R=" + Math.round(gizmo.r), mX, mY);
            }
        }

        operation_url = "/Main/LoadImageFur";

        let okrugl = (x) => {
            return Math.pow(2, Math.ceil(Math.log2(x)));
        };


        image_opened = () => {

            new_width = okrugl(imageWidth);
            new_height = okrugl(imageHeight);
            $('#img_h')[0].innerHTML += " ► " + new_height;
            $('#img_w')[0].innerHTML += " ► " + new_width;
            $("#filter_ideal").val("0;0;0;10");
            $("#filter_bat").val("0;0;-10;10");
            $("#filter_gau").val("0;0;-10;10");
            parse_params();

        }

        send_data = () => {
            let data = new FormData();

            data.append("file", $("#file")[0].files[0]);
            data.append("filter_type", cb.selectedIndex);

            if (cb.selectedIndex === 0) {
                data.append("filter", $("#filter_ideal").val());
                data.append("inFilter", $("#onCodition_ideal").val());
                data.append("outFilter", $("#noCodition_ideal").val());
                data.append("fur_mult", $("#fur_mult_ideal").val());
            }
            else if (cb.selectedIndex === 1 || cb.selectedIndex == 2) {
                data.append("filter", $("#filter_bat").val());
                data.append("inFilter", $("#gain_bat").val());
                data.append("outFilter", $("#order_bat").val());
                data.append("fur_mult", $("#fur_mult_bat").val());
            } else if (cb.selectedIndex === 3 || cb.selectedIndex == 4) {
                data.append("filter", $("#filter_gau").val());
                data.append("inFilter", $("#gain_gau").val());
                data.append("fur_mult", $("#fur_mult_gau").val());
            }

            return data;
        };

        data_sended = (respond) => {
            let string_arr = respond.split(":");
            imagename1 = string_arr[0];
            imagename2 = string_arr[1];
            imagename3 = string_arr[2];
        }

        operation_complete = () => {
            $("#resultimg1").attr("src", imagename1);
            //$("#resultimg2").attr("src", imagename2);
            $("#resultimg3").attr("src", imagename3);
            back_image = new Image();
            back_image.src = imagename2;
            let r = render;
            render = false;
            back_image.onload = () => {

                let canvas = document.getElementById("fur_editor");
                canvas.width = back_image.width;
                canvas.height = back_image.height;
                render = r;

                parse_params();
            }
        }

    </script>
    
}




